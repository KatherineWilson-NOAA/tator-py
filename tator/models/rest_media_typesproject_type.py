# coding: utf-8

"""
    Tator REST API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class RestMediaTypesprojectType(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'name': 'str',
        'description': 'str',
        'dtype': 'str',
        'file_format': 'str',
        'uploadable': 'bool',
        'keep_original': 'bool',
        'resourcetype': 'str'
    }

    attribute_map = {
        'id': 'id',
        'name': 'name',
        'description': 'description',
        'dtype': 'dtype',
        'file_format': 'file_format',
        'uploadable': 'uploadable',
        'keep_original': 'keep_original',
        'resourcetype': 'resourcetype'
    }

    def __init__(self, id=None, name=None, description='', dtype=None, file_format=None, uploadable=True, keep_original=True, resourcetype=None):  # noqa: E501
        """RestMediaTypesprojectType - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._name = None
        self._description = None
        self._dtype = None
        self._file_format = None
        self._uploadable = None
        self._keep_original = None
        self._resourcetype = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if name is not None:
            self.name = name
        if description is not None:
            self.description = description
        if dtype is not None:
            self.dtype = dtype
        if file_format is not None:
            self.file_format = file_format
        if uploadable is not None:
            self.uploadable = uploadable
        if keep_original is not None:
            self.keep_original = keep_original
        if resourcetype is not None:
            self.resourcetype = resourcetype

    @property
    def id(self):
        """Gets the id of this RestMediaTypesprojectType.  # noqa: E501

        Unique integer identifying a media type.  # noqa: E501

        :return: The id of this RestMediaTypesprojectType.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this RestMediaTypesprojectType.

        Unique integer identifying a media type.  # noqa: E501

        :param id: The id of this RestMediaTypesprojectType.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this RestMediaTypesprojectType.  # noqa: E501

        Name of the media type.  # noqa: E501

        :return: The name of this RestMediaTypesprojectType.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this RestMediaTypesprojectType.

        Name of the media type.  # noqa: E501

        :param name: The name of this RestMediaTypesprojectType.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def description(self):
        """Gets the description of this RestMediaTypesprojectType.  # noqa: E501

        Description of the media type.  # noqa: E501

        :return: The description of this RestMediaTypesprojectType.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this RestMediaTypesprojectType.

        Description of the media type.  # noqa: E501

        :param description: The description of this RestMediaTypesprojectType.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def dtype(self):
        """Gets the dtype of this RestMediaTypesprojectType.  # noqa: E501

        Type of the media, image or video.  # noqa: E501

        :return: The dtype of this RestMediaTypesprojectType.  # noqa: E501
        :rtype: str
        """
        return self._dtype

    @dtype.setter
    def dtype(self, dtype):
        """Sets the dtype of this RestMediaTypesprojectType.

        Type of the media, image or video.  # noqa: E501

        :param dtype: The dtype of this RestMediaTypesprojectType.  # noqa: E501
        :type: str
        """
        allowed_values = ["image", "video"]  # noqa: E501
        if dtype not in allowed_values:
            raise ValueError(
                "Invalid value for `dtype` ({0}), must be one of {1}"  # noqa: E501
                .format(dtype, allowed_values)
            )

        self._dtype = dtype

    @property
    def file_format(self):
        """Gets the file_format of this RestMediaTypesprojectType.  # noqa: E501

        File extension. If omitted, any recognized file extension for the given dtype is accepted for upload. Do not include a dot prefix.  # noqa: E501

        :return: The file_format of this RestMediaTypesprojectType.  # noqa: E501
        :rtype: str
        """
        return self._file_format

    @file_format.setter
    def file_format(self, file_format):
        """Sets the file_format of this RestMediaTypesprojectType.

        File extension. If omitted, any recognized file extension for the given dtype is accepted for upload. Do not include a dot prefix.  # noqa: E501

        :param file_format: The file_format of this RestMediaTypesprojectType.  # noqa: E501
        :type: str
        """

        self._file_format = file_format

    @property
    def uploadable(self):
        """Gets the uploadable of this RestMediaTypesprojectType.  # noqa: E501

        Whether this media can be uploaded.  # noqa: E501

        :return: The uploadable of this RestMediaTypesprojectType.  # noqa: E501
        :rtype: bool
        """
        return self._uploadable

    @uploadable.setter
    def uploadable(self, uploadable):
        """Sets the uploadable of this RestMediaTypesprojectType.

        Whether this media can be uploaded.  # noqa: E501

        :param uploadable: The uploadable of this RestMediaTypesprojectType.  # noqa: E501
        :type: bool
        """

        self._uploadable = uploadable

    @property
    def keep_original(self):
        """Gets the keep_original of this RestMediaTypesprojectType.  # noqa: E501

        For video dtype, whether to keep the original video file for archival purposes after transcoding. If true, the originally uploaded file will be available for download, otherwise downloads will use the transcoded videos.  # noqa: E501

        :return: The keep_original of this RestMediaTypesprojectType.  # noqa: E501
        :rtype: bool
        """
        return self._keep_original

    @keep_original.setter
    def keep_original(self, keep_original):
        """Sets the keep_original of this RestMediaTypesprojectType.

        For video dtype, whether to keep the original video file for archival purposes after transcoding. If true, the originally uploaded file will be available for download, otherwise downloads will use the transcoded videos.  # noqa: E501

        :param keep_original: The keep_original of this RestMediaTypesprojectType.  # noqa: E501
        :type: bool
        """

        self._keep_original = keep_original

    @property
    def resourcetype(self):
        """Gets the resourcetype of this RestMediaTypesprojectType.  # noqa: E501

        Type of the media.  # noqa: E501

        :return: The resourcetype of this RestMediaTypesprojectType.  # noqa: E501
        :rtype: str
        """
        return self._resourcetype

    @resourcetype.setter
    def resourcetype(self, resourcetype):
        """Sets the resourcetype of this RestMediaTypesprojectType.

        Type of the media.  # noqa: E501

        :param resourcetype: The resourcetype of this RestMediaTypesprojectType.  # noqa: E501
        :type: str
        """
        allowed_values = ["EntityTypeMediaImage", "EntityTypeMediaVideo"]  # noqa: E501
        if resourcetype not in allowed_values:
            raise ValueError(
                "Invalid value for `resourcetype` ({0}), must be one of {1}"  # noqa: E501
                .format(resourcetype, allowed_values)
            )

        self._resourcetype = resourcetype

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(RestMediaTypesprojectType, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, RestMediaTypesprojectType):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
