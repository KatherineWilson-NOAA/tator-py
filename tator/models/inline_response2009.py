# coding: utf-8

"""
    Tator REST API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class InlineResponse2009(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'created_datetime': 'datetime',
        'eol_datetime': 'datetime',
        'id': 'int',
        'lookup': 'str',
        'name': 'str',
        'path': 'str',
        'project': 'int',
        'user': 'int'
    }

    attribute_map = {
        'created_datetime': 'created_datetime',
        'eol_datetime': 'eol_datetime',
        'id': 'id',
        'lookup': 'lookup',
        'name': 'name',
        'path': 'path',
        'project': 'project',
        'user': 'user'
    }

    def __init__(self, created_datetime=None, eol_datetime=None, id=None, lookup=None, name=None, path=None, project=None, user=None):  # noqa: E501
        """InlineResponse2009 - a model defined in Swagger"""  # noqa: E501
        self._created_datetime = None
        self._eol_datetime = None
        self._id = None
        self._lookup = None
        self._name = None
        self._path = None
        self._project = None
        self._user = None
        self.discriminator = None
        self.created_datetime = created_datetime
        self.eol_datetime = eol_datetime
        if id is not None:
            self.id = id
        self.lookup = lookup
        self.name = name
        if path is not None:
            self.path = path
        self.project = project
        self.user = user

    @property
    def created_datetime(self):
        """Gets the created_datetime of this InlineResponse2009.  # noqa: E501


        :return: The created_datetime of this InlineResponse2009.  # noqa: E501
        :rtype: datetime
        """
        return self._created_datetime

    @created_datetime.setter
    def created_datetime(self, created_datetime):
        """Sets the created_datetime of this InlineResponse2009.


        :param created_datetime: The created_datetime of this InlineResponse2009.  # noqa: E501
        :type: datetime
        """
        if created_datetime is None:
            raise ValueError("Invalid value for `created_datetime`, must not be `None`")  # noqa: E501

        self._created_datetime = created_datetime

    @property
    def eol_datetime(self):
        """Gets the eol_datetime of this InlineResponse2009.  # noqa: E501


        :return: The eol_datetime of this InlineResponse2009.  # noqa: E501
        :rtype: datetime
        """
        return self._eol_datetime

    @eol_datetime.setter
    def eol_datetime(self, eol_datetime):
        """Sets the eol_datetime of this InlineResponse2009.


        :param eol_datetime: The eol_datetime of this InlineResponse2009.  # noqa: E501
        :type: datetime
        """
        if eol_datetime is None:
            raise ValueError("Invalid value for `eol_datetime`, must not be `None`")  # noqa: E501

        self._eol_datetime = eol_datetime

    @property
    def id(self):
        """Gets the id of this InlineResponse2009.  # noqa: E501


        :return: The id of this InlineResponse2009.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this InlineResponse2009.


        :param id: The id of this InlineResponse2009.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def lookup(self):
        """Gets the lookup of this InlineResponse2009.  # noqa: E501


        :return: The lookup of this InlineResponse2009.  # noqa: E501
        :rtype: str
        """
        return self._lookup

    @lookup.setter
    def lookup(self, lookup):
        """Sets the lookup of this InlineResponse2009.


        :param lookup: The lookup of this InlineResponse2009.  # noqa: E501
        :type: str
        """
        if lookup is None:
            raise ValueError("Invalid value for `lookup`, must not be `None`")  # noqa: E501

        self._lookup = lookup

    @property
    def name(self):
        """Gets the name of this InlineResponse2009.  # noqa: E501


        :return: The name of this InlineResponse2009.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this InlineResponse2009.


        :param name: The name of this InlineResponse2009.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def path(self):
        """Gets the path of this InlineResponse2009.  # noqa: E501


        :return: The path of this InlineResponse2009.  # noqa: E501
        :rtype: str
        """
        return self._path

    @path.setter
    def path(self, path):
        """Sets the path of this InlineResponse2009.


        :param path: The path of this InlineResponse2009.  # noqa: E501
        :type: str
        """

        self._path = path

    @property
    def project(self):
        """Gets the project of this InlineResponse2009.  # noqa: E501


        :return: The project of this InlineResponse2009.  # noqa: E501
        :rtype: int
        """
        return self._project

    @project.setter
    def project(self, project):
        """Sets the project of this InlineResponse2009.


        :param project: The project of this InlineResponse2009.  # noqa: E501
        :type: int
        """
        if project is None:
            raise ValueError("Invalid value for `project`, must not be `None`")  # noqa: E501

        self._project = project

    @property
    def user(self):
        """Gets the user of this InlineResponse2009.  # noqa: E501


        :return: The user of this InlineResponse2009.  # noqa: E501
        :rtype: int
        """
        return self._user

    @user.setter
    def user(self, user):
        """Sets the user of this InlineResponse2009.


        :param user: The user of this InlineResponse2009.  # noqa: E501
        :type: int
        """
        if user is None:
            raise ValueError("Invalid value for `user`, must not be `None`")  # noqa: E501

        self._user = user

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InlineResponse2009, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InlineResponse2009):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
