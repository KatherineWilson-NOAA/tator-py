# coding: utf-8

"""
    Tator REST API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class InlineResponse200Type(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'color_map': 'dict(str, object)',
        'description': 'str',
        'dtype': 'str',
        'id': 'int',
        'line_width': 'int',
        'name': 'str',
        'resourcetype': 'str'
    }

    attribute_map = {
        'color_map': 'colorMap',
        'description': 'description',
        'dtype': 'dtype',
        'id': 'id',
        'line_width': 'line_width',
        'name': 'name',
        'resourcetype': 'resourcetype'
    }

    def __init__(self, color_map=None, description=None, dtype=None, id=None, line_width=None, name=None, resourcetype=None):  # noqa: E501
        """InlineResponse200Type - a model defined in Swagger"""  # noqa: E501
        self._color_map = None
        self._description = None
        self._dtype = None
        self._id = None
        self._line_width = None
        self._name = None
        self._resourcetype = None
        self.discriminator = None
        if color_map is not None:
            self.color_map = color_map
        if description is not None:
            self.description = description
        if dtype is not None:
            self.dtype = dtype
        if id is not None:
            self.id = id
        if line_width is not None:
            self.line_width = line_width
        if name is not None:
            self.name = name
        if resourcetype is not None:
            self.resourcetype = resourcetype

    @property
    def color_map(self):
        """Gets the color_map of this InlineResponse200Type.  # noqa: E501


        :return: The color_map of this InlineResponse200Type.  # noqa: E501
        :rtype: dict(str, object)
        """
        return self._color_map

    @color_map.setter
    def color_map(self, color_map):
        """Sets the color_map of this InlineResponse200Type.


        :param color_map: The color_map of this InlineResponse200Type.  # noqa: E501
        :type: dict(str, object)
        """

        self._color_map = color_map

    @property
    def description(self):
        """Gets the description of this InlineResponse200Type.  # noqa: E501

        Description of the localization type.  # noqa: E501

        :return: The description of this InlineResponse200Type.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this InlineResponse200Type.

        Description of the localization type.  # noqa: E501

        :param description: The description of this InlineResponse200Type.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def dtype(self):
        """Gets the dtype of this InlineResponse200Type.  # noqa: E501

        Shape of this localization type.  # noqa: E501

        :return: The dtype of this InlineResponse200Type.  # noqa: E501
        :rtype: str
        """
        return self._dtype

    @dtype.setter
    def dtype(self, dtype):
        """Sets the dtype of this InlineResponse200Type.

        Shape of this localization type.  # noqa: E501

        :param dtype: The dtype of this InlineResponse200Type.  # noqa: E501
        :type: str
        """
        allowed_values = ["box", "line", "dot"]  # noqa: E501
        if dtype not in allowed_values:
            raise ValueError(
                "Invalid value for `dtype` ({0}), must be one of {1}"  # noqa: E501
                .format(dtype, allowed_values)
            )

        self._dtype = dtype

    @property
    def id(self):
        """Gets the id of this InlineResponse200Type.  # noqa: E501

        Unique integer identifying a localization type.  # noqa: E501

        :return: The id of this InlineResponse200Type.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this InlineResponse200Type.

        Unique integer identifying a localization type.  # noqa: E501

        :param id: The id of this InlineResponse200Type.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def line_width(self):
        """Gets the line_width of this InlineResponse200Type.  # noqa: E501

        Width of the line used to draw the localization.  # noqa: E501

        :return: The line_width of this InlineResponse200Type.  # noqa: E501
        :rtype: int
        """
        return self._line_width

    @line_width.setter
    def line_width(self, line_width):
        """Sets the line_width of this InlineResponse200Type.

        Width of the line used to draw the localization.  # noqa: E501

        :param line_width: The line_width of this InlineResponse200Type.  # noqa: E501
        :type: int
        """

        self._line_width = line_width

    @property
    def name(self):
        """Gets the name of this InlineResponse200Type.  # noqa: E501

        Name of the localization type.  # noqa: E501

        :return: The name of this InlineResponse200Type.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this InlineResponse200Type.

        Name of the localization type.  # noqa: E501

        :param name: The name of this InlineResponse200Type.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def resourcetype(self):
        """Gets the resourcetype of this InlineResponse200Type.  # noqa: E501

        Type of the localization.  # noqa: E501

        :return: The resourcetype of this InlineResponse200Type.  # noqa: E501
        :rtype: str
        """
        return self._resourcetype

    @resourcetype.setter
    def resourcetype(self, resourcetype):
        """Sets the resourcetype of this InlineResponse200Type.

        Type of the localization.  # noqa: E501

        :param resourcetype: The resourcetype of this InlineResponse200Type.  # noqa: E501
        :type: str
        """
        allowed_values = ["EntityTypeLocalizationBox", "EntityTypeLocalizationLine", "EntityTypeLocalizationDot"]  # noqa: E501
        if resourcetype not in allowed_values:
            raise ValueError(
                "Invalid value for `resourcetype` ({0}), must be one of {1}"  # noqa: E501
                .format(resourcetype, allowed_values)
            )

        self._resourcetype = resourcetype

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InlineResponse200Type, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InlineResponse200Type):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
