# coding: utf-8

"""
    Tator REST API

    Interface to the Tator backend.  # noqa: E501

    The version of the OpenAPI document: v1
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from tator.configuration import Configuration


class LocalizationSpec(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'frame': 'int',
        'height': 'float',
        'media_id': 'int',
        'modified': 'bool',
        'type': 'int',
        'version': 'int',
        'width': 'float',
        'x': 'float',
        'y': 'float',
        'x0': 'float',
        'x1': 'float',
        'y0': 'float',
        'y1': 'float',
        'many': 'list[LocalizationProps]'
    }

    attribute_map = {
        'frame': 'frame',
        'height': 'height',
        'media_id': 'media_id',
        'modified': 'modified',
        'type': 'type',
        'version': 'version',
        'width': 'width',
        'x': 'x',
        'y': 'y',
        'x0': 'x0',
        'x1': 'x1',
        'y0': 'y0',
        'y1': 'y1',
        'many': 'many'
    }

    def __init__(self, frame=None, height=None, media_id=None, modified=False, type=None, version=None, width=None, x=None, y=None, x0=None, x1=None, y0=None, y1=None, many=None, local_vars_configuration=None):  # noqa: E501
        """LocalizationSpec - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._frame = None
        self._height = None
        self._media_id = None
        self._modified = None
        self._type = None
        self._version = None
        self._width = None
        self._x = None
        self._y = None
        self._x0 = None
        self._x1 = None
        self._y0 = None
        self._y1 = None
        self._many = None
        self.discriminator = None

        self.frame = frame
        self.height = height
        self.media_id = media_id
        if modified is not None:
            self.modified = modified
        self.type = type
        if version is not None:
            self.version = version
        self.width = width
        self.x = x
        self.y = y
        self.x0 = x0
        self.x1 = x1
        self.y0 = y0
        self.y1 = y1
        self.many = many

    @property
    def frame(self):
        """Gets the frame of this LocalizationSpec.  # noqa: E501

        Frame number of this localization if it is in a video.  # noqa: E501

        :return: The frame of this LocalizationSpec.  # noqa: E501
        :rtype: int
        """
        return self._frame

    @frame.setter
    def frame(self, frame):
        """Sets the frame of this LocalizationSpec.

        Frame number of this localization if it is in a video.  # noqa: E501

        :param frame: The frame of this LocalizationSpec.  # noqa: E501
        :type: int
        """
        if self.local_vars_configuration.client_side_validation and frame is None:  # noqa: E501
            raise ValueError("Invalid value for `frame`, must not be `None`")  # noqa: E501

        self._frame = frame

    @property
    def height(self):
        """Gets the height of this LocalizationSpec.  # noqa: E501

        Normalized height of bounding box for `box` localization types.  # noqa: E501

        :return: The height of this LocalizationSpec.  # noqa: E501
        :rtype: float
        """
        return self._height

    @height.setter
    def height(self, height):
        """Sets the height of this LocalizationSpec.

        Normalized height of bounding box for `box` localization types.  # noqa: E501

        :param height: The height of this LocalizationSpec.  # noqa: E501
        :type: float
        """
        if self.local_vars_configuration.client_side_validation and height is None:  # noqa: E501
            raise ValueError("Invalid value for `height`, must not be `None`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                height is not None and height > 1.0):  # noqa: E501
            raise ValueError("Invalid value for `height`, must be a value less than or equal to `1.0`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                height is not None and height < 0.0):  # noqa: E501
            raise ValueError("Invalid value for `height`, must be a value greater than or equal to `0.0`")  # noqa: E501

        self._height = height

    @property
    def media_id(self):
        """Gets the media_id of this LocalizationSpec.  # noqa: E501

        Unique integer identifying a media. Required if `many` is not given.  # noqa: E501

        :return: The media_id of this LocalizationSpec.  # noqa: E501
        :rtype: int
        """
        return self._media_id

    @media_id.setter
    def media_id(self, media_id):
        """Sets the media_id of this LocalizationSpec.

        Unique integer identifying a media. Required if `many` is not given.  # noqa: E501

        :param media_id: The media_id of this LocalizationSpec.  # noqa: E501
        :type: int
        """
        if self.local_vars_configuration.client_side_validation and media_id is None:  # noqa: E501
            raise ValueError("Invalid value for `media_id`, must not be `None`")  # noqa: E501

        self._media_id = media_id

    @property
    def modified(self):
        """Gets the modified of this LocalizationSpec.  # noqa: E501

        Whether this localization was created in the web UI.  # noqa: E501

        :return: The modified of this LocalizationSpec.  # noqa: E501
        :rtype: bool
        """
        return self._modified

    @modified.setter
    def modified(self, modified):
        """Sets the modified of this LocalizationSpec.

        Whether this localization was created in the web UI.  # noqa: E501

        :param modified: The modified of this LocalizationSpec.  # noqa: E501
        :type: bool
        """

        self._modified = modified

    @property
    def type(self):
        """Gets the type of this LocalizationSpec.  # noqa: E501

        Unique integer identifying a localization type.Required if `many` is not given.  # noqa: E501

        :return: The type of this LocalizationSpec.  # noqa: E501
        :rtype: int
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this LocalizationSpec.

        Unique integer identifying a localization type.Required if `many` is not given.  # noqa: E501

        :param type: The type of this LocalizationSpec.  # noqa: E501
        :type: int
        """
        if self.local_vars_configuration.client_side_validation and type is None:  # noqa: E501
            raise ValueError("Invalid value for `type`, must not be `None`")  # noqa: E501

        self._type = type

    @property
    def version(self):
        """Gets the version of this LocalizationSpec.  # noqa: E501

        Unique integer identifying the version.  # noqa: E501

        :return: The version of this LocalizationSpec.  # noqa: E501
        :rtype: int
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this LocalizationSpec.

        Unique integer identifying the version.  # noqa: E501

        :param version: The version of this LocalizationSpec.  # noqa: E501
        :type: int
        """

        self._version = version

    @property
    def width(self):
        """Gets the width of this LocalizationSpec.  # noqa: E501

        Normalized width of bounding box for `box` localization types.  # noqa: E501

        :return: The width of this LocalizationSpec.  # noqa: E501
        :rtype: float
        """
        return self._width

    @width.setter
    def width(self, width):
        """Sets the width of this LocalizationSpec.

        Normalized width of bounding box for `box` localization types.  # noqa: E501

        :param width: The width of this LocalizationSpec.  # noqa: E501
        :type: float
        """
        if self.local_vars_configuration.client_side_validation and width is None:  # noqa: E501
            raise ValueError("Invalid value for `width`, must not be `None`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                width is not None and width > 1.0):  # noqa: E501
            raise ValueError("Invalid value for `width`, must be a value less than or equal to `1.0`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                width is not None and width < 0.0):  # noqa: E501
            raise ValueError("Invalid value for `width`, must be a value greater than or equal to `0.0`")  # noqa: E501

        self._width = width

    @property
    def x(self):
        """Gets the x of this LocalizationSpec.  # noqa: E501

        Normalized horizontal position of dot.  # noqa: E501

        :return: The x of this LocalizationSpec.  # noqa: E501
        :rtype: float
        """
        return self._x

    @x.setter
    def x(self, x):
        """Sets the x of this LocalizationSpec.

        Normalized horizontal position of dot.  # noqa: E501

        :param x: The x of this LocalizationSpec.  # noqa: E501
        :type: float
        """
        if self.local_vars_configuration.client_side_validation and x is None:  # noqa: E501
            raise ValueError("Invalid value for `x`, must not be `None`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                x is not None and x > 1.0):  # noqa: E501
            raise ValueError("Invalid value for `x`, must be a value less than or equal to `1.0`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                x is not None and x < 0.0):  # noqa: E501
            raise ValueError("Invalid value for `x`, must be a value greater than or equal to `0.0`")  # noqa: E501

        self._x = x

    @property
    def y(self):
        """Gets the y of this LocalizationSpec.  # noqa: E501

        Normalized vertical position of dot.  # noqa: E501

        :return: The y of this LocalizationSpec.  # noqa: E501
        :rtype: float
        """
        return self._y

    @y.setter
    def y(self, y):
        """Sets the y of this LocalizationSpec.

        Normalized vertical position of dot.  # noqa: E501

        :param y: The y of this LocalizationSpec.  # noqa: E501
        :type: float
        """
        if self.local_vars_configuration.client_side_validation and y is None:  # noqa: E501
            raise ValueError("Invalid value for `y`, must not be `None`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                y is not None and y > 1.0):  # noqa: E501
            raise ValueError("Invalid value for `y`, must be a value less than or equal to `1.0`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                y is not None and y < 0.0):  # noqa: E501
            raise ValueError("Invalid value for `y`, must be a value greater than or equal to `0.0`")  # noqa: E501

        self._y = y

    @property
    def x0(self):
        """Gets the x0 of this LocalizationSpec.  # noqa: E501

        Normalized horizontal position of start of line for `line` localization types.  # noqa: E501

        :return: The x0 of this LocalizationSpec.  # noqa: E501
        :rtype: float
        """
        return self._x0

    @x0.setter
    def x0(self, x0):
        """Sets the x0 of this LocalizationSpec.

        Normalized horizontal position of start of line for `line` localization types.  # noqa: E501

        :param x0: The x0 of this LocalizationSpec.  # noqa: E501
        :type: float
        """
        if self.local_vars_configuration.client_side_validation and x0 is None:  # noqa: E501
            raise ValueError("Invalid value for `x0`, must not be `None`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                x0 is not None and x0 > 1.0):  # noqa: E501
            raise ValueError("Invalid value for `x0`, must be a value less than or equal to `1.0`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                x0 is not None and x0 < 0.0):  # noqa: E501
            raise ValueError("Invalid value for `x0`, must be a value greater than or equal to `0.0`")  # noqa: E501

        self._x0 = x0

    @property
    def x1(self):
        """Gets the x1 of this LocalizationSpec.  # noqa: E501

        Normalized horizontal position of end of line for `line` localization types.  # noqa: E501

        :return: The x1 of this LocalizationSpec.  # noqa: E501
        :rtype: float
        """
        return self._x1

    @x1.setter
    def x1(self, x1):
        """Sets the x1 of this LocalizationSpec.

        Normalized horizontal position of end of line for `line` localization types.  # noqa: E501

        :param x1: The x1 of this LocalizationSpec.  # noqa: E501
        :type: float
        """
        if self.local_vars_configuration.client_side_validation and x1 is None:  # noqa: E501
            raise ValueError("Invalid value for `x1`, must not be `None`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                x1 is not None and x1 > 1.0):  # noqa: E501
            raise ValueError("Invalid value for `x1`, must be a value less than or equal to `1.0`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                x1 is not None and x1 < 0.0):  # noqa: E501
            raise ValueError("Invalid value for `x1`, must be a value greater than or equal to `0.0`")  # noqa: E501

        self._x1 = x1

    @property
    def y0(self):
        """Gets the y0 of this LocalizationSpec.  # noqa: E501

        Normalized vertical position of start of line for `line` localization types.  # noqa: E501

        :return: The y0 of this LocalizationSpec.  # noqa: E501
        :rtype: float
        """
        return self._y0

    @y0.setter
    def y0(self, y0):
        """Sets the y0 of this LocalizationSpec.

        Normalized vertical position of start of line for `line` localization types.  # noqa: E501

        :param y0: The y0 of this LocalizationSpec.  # noqa: E501
        :type: float
        """
        if self.local_vars_configuration.client_side_validation and y0 is None:  # noqa: E501
            raise ValueError("Invalid value for `y0`, must not be `None`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                y0 is not None and y0 > 1.0):  # noqa: E501
            raise ValueError("Invalid value for `y0`, must be a value less than or equal to `1.0`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                y0 is not None and y0 < 0.0):  # noqa: E501
            raise ValueError("Invalid value for `y0`, must be a value greater than or equal to `0.0`")  # noqa: E501

        self._y0 = y0

    @property
    def y1(self):
        """Gets the y1 of this LocalizationSpec.  # noqa: E501

        Normalized vertical position of end of line for `line` localization types.  # noqa: E501

        :return: The y1 of this LocalizationSpec.  # noqa: E501
        :rtype: float
        """
        return self._y1

    @y1.setter
    def y1(self, y1):
        """Sets the y1 of this LocalizationSpec.

        Normalized vertical position of end of line for `line` localization types.  # noqa: E501

        :param y1: The y1 of this LocalizationSpec.  # noqa: E501
        :type: float
        """
        if self.local_vars_configuration.client_side_validation and y1 is None:  # noqa: E501
            raise ValueError("Invalid value for `y1`, must not be `None`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                y1 is not None and y1 > 1.0):  # noqa: E501
            raise ValueError("Invalid value for `y1`, must be a value less than or equal to `1.0`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                y1 is not None and y1 < 0.0):  # noqa: E501
            raise ValueError("Invalid value for `y1`, must be a value greater than or equal to `0.0`")  # noqa: E501

        self._y1 = y1

    @property
    def many(self):
        """Gets the many of this LocalizationSpec.  # noqa: E501

        List of localizations if this request is for bulkcreate.  # noqa: E501

        :return: The many of this LocalizationSpec.  # noqa: E501
        :rtype: list[LocalizationProps]
        """
        return self._many

    @many.setter
    def many(self, many):
        """Sets the many of this LocalizationSpec.

        List of localizations if this request is for bulkcreate.  # noqa: E501

        :param many: The many of this LocalizationSpec.  # noqa: E501
        :type: list[LocalizationProps]
        """
        if self.local_vars_configuration.client_side_validation and many is None:  # noqa: E501
            raise ValueError("Invalid value for `many`, must not be `None`")  # noqa: E501

        self._many = many

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, LocalizationSpec):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, LocalizationSpec):
            return True

        return self.to_dict() != other.to_dict()
