# coding: utf-8

"""
    Tator REST API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class Line(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'x0': 'float',
        'x1': 'float',
        'y0': 'float',
        'y1': 'float'
    }

    attribute_map = {
        'x0': 'x0',
        'x1': 'x1',
        'y0': 'y0',
        'y1': 'y1'
    }

    def __init__(self, x0=None, x1=None, y0=None, y1=None):  # noqa: E501
        """Line - a model defined in Swagger"""  # noqa: E501
        self._x0 = None
        self._x1 = None
        self._y0 = None
        self._y1 = None
        self.discriminator = None
        if x0 is not None:
            self.x0 = x0
        if x1 is not None:
            self.x1 = x1
        if y0 is not None:
            self.y0 = y0
        if y1 is not None:
            self.y1 = y1

    @property
    def x0(self):
        """Gets the x0 of this Line.  # noqa: E501

        Normalized horizontal position of start of line for `line` localization types.  # noqa: E501

        :return: The x0 of this Line.  # noqa: E501
        :rtype: float
        """
        return self._x0

    @x0.setter
    def x0(self, x0):
        """Sets the x0 of this Line.

        Normalized horizontal position of start of line for `line` localization types.  # noqa: E501

        :param x0: The x0 of this Line.  # noqa: E501
        :type: float
        """

        self._x0 = x0

    @property
    def x1(self):
        """Gets the x1 of this Line.  # noqa: E501

        Normalized horizontal position of end of line for `line` localization types.  # noqa: E501

        :return: The x1 of this Line.  # noqa: E501
        :rtype: float
        """
        return self._x1

    @x1.setter
    def x1(self, x1):
        """Sets the x1 of this Line.

        Normalized horizontal position of end of line for `line` localization types.  # noqa: E501

        :param x1: The x1 of this Line.  # noqa: E501
        :type: float
        """

        self._x1 = x1

    @property
    def y0(self):
        """Gets the y0 of this Line.  # noqa: E501

        Normalized vertical position of start of line for `line` localization types.  # noqa: E501

        :return: The y0 of this Line.  # noqa: E501
        :rtype: float
        """
        return self._y0

    @y0.setter
    def y0(self, y0):
        """Sets the y0 of this Line.

        Normalized vertical position of start of line for `line` localization types.  # noqa: E501

        :param y0: The y0 of this Line.  # noqa: E501
        :type: float
        """

        self._y0 = y0

    @property
    def y1(self):
        """Gets the y1 of this Line.  # noqa: E501

        Normalized vertical position of end of line for `line` localization types.  # noqa: E501

        :return: The y1 of this Line.  # noqa: E501
        :rtype: float
        """
        return self._y1

    @y1.setter
    def y1(self, y1):
        """Sets the y1 of this Line.

        Normalized vertical position of end of line for `line` localization types.  # noqa: E501

        :param y1: The y1 of this Line.  # noqa: E501
        :type: float
        """

        self._y1 = y1

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Line, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Line):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
