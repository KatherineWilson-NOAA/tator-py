# coding: utf-8

"""
    Tator REST API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class InlineResponse20021(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'name': 'str',
        'summary': 'str',
        'thumb': 'str',
        'num_files': 'int',
        'size': 'int',
        'usernames': 'list[str]',
        'permission': 'str'
    }

    attribute_map = {
        'id': 'id',
        'name': 'name',
        'summary': 'summary',
        'thumb': 'thumb',
        'num_files': 'num_files',
        'size': 'size',
        'usernames': 'usernames',
        'permission': 'permission'
    }

    def __init__(self, id=None, name=None, summary='', thumb=None, num_files=None, size=None, usernames=None, permission=None):  # noqa: E501
        """InlineResponse20021 - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._name = None
        self._summary = None
        self._thumb = None
        self._num_files = None
        self._size = None
        self._usernames = None
        self._permission = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if name is not None:
            self.name = name
        if summary is not None:
            self.summary = summary
        if thumb is not None:
            self.thumb = thumb
        if num_files is not None:
            self.num_files = num_files
        if size is not None:
            self.size = size
        if usernames is not None:
            self.usernames = usernames
        if permission is not None:
            self.permission = permission

    @property
    def id(self):
        """Gets the id of this InlineResponse20021.  # noqa: E501

        Unique integer identifying the project.  # noqa: E501

        :return: The id of this InlineResponse20021.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this InlineResponse20021.

        Unique integer identifying the project.  # noqa: E501

        :param id: The id of this InlineResponse20021.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this InlineResponse20021.  # noqa: E501

        Name of the project.  # noqa: E501

        :return: The name of this InlineResponse20021.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this InlineResponse20021.

        Name of the project.  # noqa: E501

        :param name: The name of this InlineResponse20021.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def summary(self):
        """Gets the summary of this InlineResponse20021.  # noqa: E501

        Summary of the project.  # noqa: E501

        :return: The summary of this InlineResponse20021.  # noqa: E501
        :rtype: str
        """
        return self._summary

    @summary.setter
    def summary(self, summary):
        """Sets the summary of this InlineResponse20021.

        Summary of the project.  # noqa: E501

        :param summary: The summary of this InlineResponse20021.  # noqa: E501
        :type: str
        """

        self._summary = summary

    @property
    def thumb(self):
        """Gets the thumb of this InlineResponse20021.  # noqa: E501

        URL of thumbnail used to represent the project.  # noqa: E501

        :return: The thumb of this InlineResponse20021.  # noqa: E501
        :rtype: str
        """
        return self._thumb

    @thumb.setter
    def thumb(self, thumb):
        """Sets the thumb of this InlineResponse20021.

        URL of thumbnail used to represent the project.  # noqa: E501

        :param thumb: The thumb of this InlineResponse20021.  # noqa: E501
        :type: str
        """

        self._thumb = thumb

    @property
    def num_files(self):
        """Gets the num_files of this InlineResponse20021.  # noqa: E501

        Number of files in the project.  # noqa: E501

        :return: The num_files of this InlineResponse20021.  # noqa: E501
        :rtype: int
        """
        return self._num_files

    @num_files.setter
    def num_files(self, num_files):
        """Sets the num_files of this InlineResponse20021.

        Number of files in the project.  # noqa: E501

        :param num_files: The num_files of this InlineResponse20021.  # noqa: E501
        :type: int
        """

        self._num_files = num_files

    @property
    def size(self):
        """Gets the size of this InlineResponse20021.  # noqa: E501

        Size of the project in bytes.  # noqa: E501

        :return: The size of this InlineResponse20021.  # noqa: E501
        :rtype: int
        """
        return self._size

    @size.setter
    def size(self, size):
        """Sets the size of this InlineResponse20021.

        Size of the project in bytes.  # noqa: E501

        :param size: The size of this InlineResponse20021.  # noqa: E501
        :type: int
        """

        self._size = size

    @property
    def usernames(self):
        """Gets the usernames of this InlineResponse20021.  # noqa: E501

        List of usernames of project members.  # noqa: E501

        :return: The usernames of this InlineResponse20021.  # noqa: E501
        :rtype: list[str]
        """
        return self._usernames

    @usernames.setter
    def usernames(self, usernames):
        """Sets the usernames of this InlineResponse20021.

        List of usernames of project members.  # noqa: E501

        :param usernames: The usernames of this InlineResponse20021.  # noqa: E501
        :type: list[str]
        """

        self._usernames = usernames

    @property
    def permission(self):
        """Gets the permission of this InlineResponse20021.  # noqa: E501

        Permission level of user making request.  # noqa: E501

        :return: The permission of this InlineResponse20021.  # noqa: E501
        :rtype: str
        """
        return self._permission

    @permission.setter
    def permission(self, permission):
        """Sets the permission of this InlineResponse20021.

        Permission level of user making request.  # noqa: E501

        :param permission: The permission of this InlineResponse20021.  # noqa: E501
        :type: str
        """

        self._permission = permission

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InlineResponse20021, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InlineResponse20021):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
