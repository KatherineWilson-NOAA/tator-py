# coding: utf-8

"""
    Tator REST API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class AnalysisListInner(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'data_type': 'int',
        'data_query': 'str',
        'project': 'int',
        'resourcetype': 'str'
    }

    attribute_map = {
        'name': 'name',
        'data_type': 'data_type',
        'data_query': 'data_query',
        'project': 'project',
        'resourcetype': 'resourcetype'
    }

    def __init__(self, name=None, data_type=None, data_query='*', project=None, resourcetype=None):  # noqa: E501
        """AnalysisListInner - a model defined in Swagger"""  # noqa: E501
        self._name = None
        self._data_type = None
        self._data_query = None
        self._project = None
        self._resourcetype = None
        self.discriminator = None
        if name is not None:
            self.name = name
        if data_type is not None:
            self.data_type = data_type
        if data_query is not None:
            self.data_query = data_query
        if project is not None:
            self.project = project
        if resourcetype is not None:
            self.resourcetype = resourcetype

    @property
    def name(self):
        """Gets the name of this AnalysisListInner.  # noqa: E501

        Name of analysis.  # noqa: E501

        :return: The name of this AnalysisListInner.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this AnalysisListInner.

        Name of analysis.  # noqa: E501

        :param name: The name of this AnalysisListInner.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def data_type(self):
        """Gets the data_type of this AnalysisListInner.  # noqa: E501

        A unique integer identifying an entity type to analyze.  # noqa: E501

        :return: The data_type of this AnalysisListInner.  # noqa: E501
        :rtype: int
        """
        return self._data_type

    @data_type.setter
    def data_type(self, data_type):
        """Sets the data_type of this AnalysisListInner.

        A unique integer identifying an entity type to analyze.  # noqa: E501

        :param data_type: The data_type of this AnalysisListInner.  # noqa: E501
        :type: int
        """

        self._data_type = data_type

    @property
    def data_query(self):
        """Gets the data_query of this AnalysisListInner.  # noqa: E501

        Lucene query string used to retrieve entities to analyze.  # noqa: E501

        :return: The data_query of this AnalysisListInner.  # noqa: E501
        :rtype: str
        """
        return self._data_query

    @data_query.setter
    def data_query(self, data_query):
        """Sets the data_query of this AnalysisListInner.

        Lucene query string used to retrieve entities to analyze.  # noqa: E501

        :param data_query: The data_query of this AnalysisListInner.  # noqa: E501
        :type: str
        """

        self._data_query = data_query

    @property
    def project(self):
        """Gets the project of this AnalysisListInner.  # noqa: E501

        Unique integer identifying a project.  # noqa: E501

        :return: The project of this AnalysisListInner.  # noqa: E501
        :rtype: int
        """
        return self._project

    @project.setter
    def project(self, project):
        """Sets the project of this AnalysisListInner.

        Unique integer identifying a project.  # noqa: E501

        :param project: The project of this AnalysisListInner.  # noqa: E501
        :type: int
        """

        self._project = project

    @property
    def resourcetype(self):
        """Gets the resourcetype of this AnalysisListInner.  # noqa: E501

        Analysis type.  # noqa: E501

        :return: The resourcetype of this AnalysisListInner.  # noqa: E501
        :rtype: str
        """
        return self._resourcetype

    @resourcetype.setter
    def resourcetype(self, resourcetype):
        """Sets the resourcetype of this AnalysisListInner.

        Analysis type.  # noqa: E501

        :param resourcetype: The resourcetype of this AnalysisListInner.  # noqa: E501
        :type: str
        """
        allowed_values = ["AnalysisCount"]  # noqa: E501
        if resourcetype not in allowed_values:
            raise ValueError(
                "Invalid value for `resourcetype` ({0}), must be one of {1}"  # noqa: E501
                .format(resourcetype, allowed_values)
            )

        self._resourcetype = resourcetype

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AnalysisListInner, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AnalysisListInner):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
